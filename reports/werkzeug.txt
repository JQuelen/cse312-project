Werkzeug


Developers:
* Jackson Kamp (jakamp@buffalo.edu)
* Joyce (joycesom@buffalo.edu)
* John (cantopra@buffalo.edu)
* Dom Sciarrino (dpsciarr@buffalo.edu)


Introduction:
Werkzeug is a Web Server Gateway Interface (WSGI) application library for web 
applications. It is implemented without the need for dependencies, so it is a 
reliable API solution. Flask, a web framework that was predominantly used in 
our project, is dependent on the Werkzeug library implementation.


Usage in Petstagram:
We directly utilized the Werkzeug “utils” library in the implementation of our 
multimedia content form. Specifically, we used the ‘secure_filename’ function 
found at line 430 in src/utils.py:

https://github.com/pallets/werkzeug/blob/master/src/werkzeug/utils.py 



From line 177 in app/routes.py:

        if ".png" in file.filename or ".jpg" in file.filename:
            cookie = request.cookies.get('userauth')
            user_data = db.get_user_from_cookie(cookie)[0]
            username = user_data['username']

            filename = secure_filename(file.filename)
            path = os.path.join(os.path.dirname(__file__), f"static/uploaded/{filename}")
            file.save(path)

            uploadDate = datetime.today()

            db.update_photo(
                photo_path=f"static/uploaded/{filename}",
                username=username,
                upload_date=uploadDate
            )
            
            return redirect(url_for( 'index' ))



We pass the filename to secure_filename() in order to make sure the filename 
we are saving is robust and secure to the system on which the project is deployed. 
If there are any spaces, they are replaced with underscores. This helps with cross-
platform file sharing, since a name on a Windows machine may not be secure on a 
Linux machine and vice versa.